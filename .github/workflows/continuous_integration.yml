name: 'Continuous Integration'

concurrency:
  group: 'ci-${{ github.repository_id }}'
  cancel-in-progress: true

on:

  schedule:
    - cron: '30 1,13 * * 1-5' # At minute 30 past hour 1 and 13 on every day-of-week from Monday through Friday

jobs:

  static_application_security_testing:

    name: 'Static Application Security Testing (SAST)'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read

    steps:

      - name: 'Set up steps'
        id: setup
        run: |
          echo "::set-output name=repository::$( echo "${{ github.repository }}" )"
          echo "::set-output name=repository_owner::$( echo "${{ github.repository_owner }}" )"
          echo "::set-output name=repository_name::$( echo "${{ github.event.repository.name }}" )"
          echo "::set-output name=branch::$( echo "${{ github.event.repository.default_branch }}" )"
        shell: bash

      - name: 'Check out repository'
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: '${{ steps.setup.outputs.branch }}'

      - name: 'Set up python'
        id: python
        uses: ./.github/actions/setup-python
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          requirements: 'requirements-dev.txt'

      - name: 'Check code with black'
        id: black
        run: black --target-version py39 --line-length 120 --check .
        shell: bash

      # - name: 'Check code with cspell'
      #   id: cspell
      #   uses: check-spelling/check-spelling@v0.0.20
      #   with:
      #     event_aliases: '{"workflow_dispatch":"push"}'
      #     spell_check_this: check-spelling/spell-check-this@main
      #     only_check_changed_files: false
      #     check_extra_dictionaries: true
      #     extra_dictionary_limit: 25
      #     extra_dictionaries:
      #       cspell:en_US/en_US.txt
      #       cspell:en_US/hyphenated-words.txt
      #       cspell:pt_PT/Portuguese-European.txt
      #       cspell:software-terms/software-terms.txt
      #       cspell:software-terms/software-tools.txt
      #       cspell:software-terms/network-protocols.txt
      #       cspell:software-terms/network-os.txt
      #       cspell:public-licenses/public-licenses.txt
      #       cspell:public-licenses/additional-licenses.txt
      #       cspell:companies/companies.txt
      #       cspell:aws/aws.txt
      #       cspell:docker/docker-words.txt
      #       cspell:git/git.txt
      #       cspell:django/django.txt
      #       cspell:npm/npm.txt
      #       cspell:bash/bash-words.txt
      #       cspell:python/python.txt
      #       cspell:python/python-lib.txt
      #       cspell:python/extra.txt
      #       cspell:python/additional_words.txt
      #       cspell:typescript/typescript.txt
      #       cspell:html/html.txt
      #       cspell:html-symbol-entities/entities.txt
      #       cspell:css/css.txt
      #       cspell:filetypes/filetypes.txt

  unit_testing:

    name: 'Unit Testing'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read

    steps:

      - name: 'Set up steps'
        id: setup
        run: |
          echo "::set-output name=repository::$( echo "${{ github.repository }}" )"
          echo "::set-output name=repository_owner::$( echo "${{ github.repository_owner }}" )"
          echo "::set-output name=repository_name::$( echo "${{ github.event.repository.name }}" )"
          echo "::set-output name=branch::$( echo "${{ github.event.repository.default_branch }}" )"
        shell: bash

      - name: 'Check out repository'
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: '${{ steps.setup.outputs.branch }}'

      - name: 'Set up python'
        id: python
        uses: ./.github/actions/setup-python
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          requirements: 'requirements-dev.txt'

  dynamic_application_security_testing:

    name: 'Dynamic Application Security Testing (DAST)'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      actions: read

    steps:

      - name: 'Set up steps'
        id: setup
        run: |
          echo "::set-output name=repository::$( echo "${{ github.repository }}" )"
          echo "::set-output name=repository_owner::$( echo "${{ github.repository_owner }}" )"
          echo "::set-output name=repository_name::$( echo "${{ github.event.repository.name }}" )"
          echo "::set-output name=branch::$( echo "${{ github.event.repository.default_branch }}" )"
        shell: bash

      - name: 'Check out repository'
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: '${{ steps.setup.outputs.branch }}'

      - name: 'Get build version'
        id: versioning
        uses: ./.github/actions/get-build-version
        with:
          file: '__init__.py'

      - name: 'Build docker image'
        id: docker
        uses: ./.github/actions/build-docker-image
        with:
          name: '${{ steps.setup.outputs.repository }}'
          tag: '${{ steps.versioning.outputs.version }}'
          dockerfile: 'Dockerfile'
          archive: '${{ steps.setup.outputs.repository_name }}-docker.tar.gz'

  report:

    name: 'Report'
    runs-on: ubuntu-latest

    needs: [static_application_security_testing, unit_testing, dynamic_application_security_testing]

    if: ${{ always() }}

    permissions:
      contents: read
      actions: read

    steps:

      - name: 'Set up steps'
        id: setup
        run: |
          echo "::set-output name=repository::$( echo "${{ github.repository }}" )"
          echo "::set-output name=repository_owner::$( echo "${{ github.repository_owner }}" )"
          echo "::set-output name=repository_name::$( echo "${{ github.event.repository.name }}" )"
          echo "::set-output name=branch::$( echo "${{ github.event.repository.default_branch }}" )"
          echo "::set-output name=channel::$( echo "#development" )"
        shell: bash

      - name: 'Check out repository'
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: '${{ steps.setup.outputs.branch }}'

      - name: 'Get build version'
        id: versioning
        uses: ./.github/actions/get-build-version
        with:
          file: '__init__.py'

      - name: 'Get workflow status'
        id: workflow
        uses: martialonline/workflow-status@v3

      - name: Notify channel '#${{ steps.setup.outputs.channel }}'
        id: notify
        if: ${{ always() && (steps.workflow.outputs.status == 'failure') }}
        uses: adamkdean/simple-slack-notify@v1.1.2
        env:
          SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL }}'
        with:
          channel: '${{ steps.setup.outputs.channel }}'
          status: '${{ steps.workflow.outputs.status }}'
          success_text:   '  [*SUCCESS*] <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} (${{ steps.setup.outputs.repository }})>'
          failure_text:   '  [*FAILURE*] <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} (${{ steps.setup.outputs.repository }})>'
          cancelled_text: '[*CANCELLED*] <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }} (${{ steps.setup.outputs.repository }})>'
          fields: |
            [
               { "title": "Version", "value": "${{ steps.versioning.outputs.version }}", "short": true }
              ,{ "title":  "Branch", "value": "<${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ steps.setup.outputs.branch }}>", "short": true }
            ]
